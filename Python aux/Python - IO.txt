==============================================================================================================================
I/O
------------------------------------------------------------------------------------------------------------------------------
# 1.1
Check if file exists:
	import os.path
	if(os.path.isfile(my_file_name)):

# 1.2
List everything in dir (just names not full pathes):
	mypath = "<path to dir with files>"
	all_files = [f for f in listdir(mypath)]

# 1.3
Get json file names only:
	from os.path import isfile, join
	from os import listdir

	mypath = "<path to dir with json files>"
	json_files = [f for f in listdir(mypath) if isfile(join(mypath, f)) and join(mypath, f)[-4:]=="json"]
	

# 2
Open file for read:
	infile = open(my_infile, 'r', encoding='utf-8-sig')
	for row in infile:
		...

Open file for write:
	outfile = open(my_outfile, 'w', encoding='utf-8-sig')
	outfile.write(my_str)

Access file with ignoring error:
	import codecs
	outfile = codecs.open(my_outfile, "r", encoding='utf-8-sig', errors='ignore')
	for row in outfile:
		...

# 3
CSV readers:
	csv_reader = csv.reader(infile)
	csv_reader = csv.DictReader(infile)

	csv_writer = csv.writer(outfile)
	csv_writer.writerow(values_ls)    # values should be in a list, or else each letter will be written in separate column

# 4.1
Formatted print:
	print('%-10s' % 'apple','text')
	print('%-10s' % 'appleboy','text')

	output:
	apple     text 
	appleboy  text

# 4.2
Print numbers with leading zeros:
	for i in range(7,13,1):
		print("%04d" % i)

	Outs:
	  0007
	  0008
	  0009
	  0010
	  0011
	  0012

# 5
Absolute dir the script is in:
	script_dir = os.path.dirname(__file__) 
	script_dir = os.path.dirname(os.path.abspath(__file__))  # might be better working
  
# 6
Pickle dict:
  import pickle
  import dill   # need for pickling class objects
  
  my_dict = {}
  storage_dir = 'my_dir_path/'
	pickle_file = 'my_dict_1.pickle'
	with open(storage_dir+pickle_file, 'wb') as outfile:
		pickle.dump(my_dict, outfile, protocol=pickle.HIGHEST_PROTOCOL)

NOTE:
  There are currently 3 different protocols which can be used for pickling.

  Protocol version 0 is the original ASCII protocol and is backwards compatible with earlier versions of Python.
  Protocol version 1 is the old binary format which is also compatible with earlier versions of Python.
  Protocol version 2 was introduced in Python 2.3. It provides much more efficient pickling of new-style classes.
  
  If a protocol is not specified, protocol 0 is used. If protocol is specified 
  as a negative value or HIGHEST_PROTOCOL, the highest protocol version available will be used.
  Stick with protocol version 2, especially if you are using custom classes derived from object (new-style classes). 
  Which most modern code does, these days.

# 5.2
Load pickle:
  storage_dir = 'my_dir_path/'
	pickle_file = 'my_pickled_file.pickle'
	with open(storage_dir+pickle_file, 'rb') as infile:
		f = pickle.load(infile)

# 7
Reading cyrillic files:
Add the following at the beginning of the python script as-is (preferably use python 2.7, might not work in python 3):
	# -*- coding: utf-8 -*-
	import sys
	import locale
	reload(sys)
	sys.setdefaultencoding('utf-8')

and then print the rows:
	with codecs.open(my_infile_path, "r", encoding='cp1251', errors='ignore') as infile:
		for row in infile:
			print row    # or if bad symbols  [print (str(row).encode('utf-8'))]

# 8
Read file in chunk of lines:
from itertools import islice

read_n_lines = 4
read_path = "..."
with codecs.open(read_path, "r", encoding='utf-8', errors='ignore') as infile:
	while True:
		next_n_rows = list(islice(infile, read_n_lines))
		if(not next_n_rows):
			break

# 9
Newline conversion in Python 3
Post link: https://pythonconquerstheuniverse.wordpress.com/2011/05/08/newline-conversion-in-python-3/

Posted on 2011/05/08 by Steve Ferg
I use Python on both Windows and Unix.  Occasionally when running on Windows  I need to read in a file containing Windows newlines and write it out with Unix/Linux newlines.  And sometimes when running on Unix, I need to run the newline conversion in the other direction.

Prior to Python 3, the accepted way to do this was to read data from the file in binary mode, convert the newline characters in the data, and then write the data out again in binary mode. The Tools/Scripts directory contained two scripts (crlf.py and lfcr.py) with illustrative examples. Here, for instance is the key code from crlf.py (Windows to Unix conversion)

        data = open(filename, "rb").read()
        newdata = data.replace("\r\n", "\n")
        if newdata != data:
            f = open(filename, "wb")
            f.write(newdata)
            f.close()
But if you try to do that with Python 3+, it won’t work.

The key to what will work is the new “newline” argument for the built-in file open() function. It is documented here.

The key point from that documentation is this:

newline controls how universal newlines works (it only applies to text mode). It can be None, '', '\n', '\r', and '\r\n'. It works as follows:

On input, if newline is None, universal newlines mode is enabled. Lines in the input can end in '\n', '\r', or '\r\n', and these are translated into '\n' before being returned to the caller. If it is '', universal newline mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.

On output, if newline is None, any '\n' characters written are translated to the system default line separator, os.linesep. If newline is '', no translation takes place. If newline is any of the other legal values, any '\n' characters written are translated to the given string.

So now when I want to convert a file from Windows-style newlines to Linux-style newlines, I do this:

filename = "NameOfFileToBeConverted"
fileContents = open(filename,"r").read()
f = open(filename,"w", newline="\n")
f.write(fileContents)
f.close()


# 10
Delete chars in file:
	with open(path, "a") as outfile:
		outfile.seek(-2, os.SEEK_END)   # seek last 2 chars
		outfile.truncate()
