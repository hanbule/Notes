==============================================================================================================================
Numpy
------------------------------------------------------------------------------------------------------------------------------
Numpy is good as long as it fits your RAM but for larger matrices try to use out-of-core approaches: 
1 - Pytables (carray, earray, vlarray)
	I found 'vlarray' more flexible as it allows to modify data. But internally, it's just a set of rows,
	so you have to work with values row-wise. Data is stored in HDF5.
2 - Dask (dask dataframes, dask arrays)
	What I like about Dask that it's supports parallel computing. But dask arrays are not mutable yet.
	Can be stored in HDF5 as well.
3 - RDBMS (SQLite, Postgres)

# 1.1
Create array with zeros:
  h = 2   # cnt of rows
  w = 3   # cnt of cols
  mtx = np.zeros(shape=(h, w))
	
  mtx:
  [0., 0., 0.]
  [0., 0., 0.]
  [0., 0., 0.]
  
  
# 1.2
Create array with certain values:
  h = 2   # cnt of rows
  w = 3   # cnt of cols
  mtx = np.full((h, w), your_value)
  
  
# 1.2
Create array from list of lists:
  h = 2   # cnt of rows
  w = 3   # cnt of cols
  ls = [[j for j in range(w)] for i in range(h)]
  mtx = np.array(ls)
  
  mtx:
    [0, 1, 2]
    [0, 1, 2]
  
  
# 1.3
Create array from list by reshaping:
  ls = [i for i in range(4)]
  mtx = np.reshape(ls, (2,2))
  
  mtx:
    [0, 1]
    [2, 3]
  
  
# 2
Get upper triangle values from 2D numpy array:
  ls = [i+1 for i in range(9)]
  mtx = np.reshape(ls, (3,3))
  
  mtx:
    [1, 2, 3]
    [4, 5, 6]
    [7, 8, 9]
  
  h,w = mtx.shape
  diag_offset = 0  # 0 - includes diagonal, 1 - does not include diagonal as shifts one step up
  upper_triangle_indexes = np.triu_indices(h, diag_offset, w)
  upper_mtx = mtx[upper_triangle_indexes]
  
  upper_mtx:
    array([1, 2, 3, 5, 6, 9])

    e.g.
      [1, 2, 3]
      [   5, 6]
      [      9]
  
  
# 3.1
Get min value in array:
  mtx.min()


# 3.2
Get coordinates of min value array:
  mtx = ... # your numpy matrix
  np.unravel_index(mtx.argmin(), mtx.shape)


# 4
Replace all 5's by 4:
  mtx[mtx==5] = 4
  
# 5.1
Delete rows/cols from 2D array:
  mtx:
    [1, 2, 3]
    [4, 5, 6]
    [7, 8, 9]
    
  np.delete(mtx, (0,2), axis=0)  # returns [[4,5,6]]
  np.delete(mtx, (0,2), axis=1)  # returns [[2], [5], [8]]
  
# 5.2
Add rows/cols to 2D array:
  mtx:
    [1, 2, 3]
    [4, 5, 6]
    [7, 8, 9]
    
    
  col = np.array([4,4,4]).reshape(3,1)
  np.vstack( (mtx, col) )  # add col
  mtx:
    [1, 2, 3, 4]
    [4, 5, 6, 4]
    [7, 8, 9, 4]
    [4, 4, 4, 4]  
    
  row = np.array([[4,4,4]])
  np.vstack( (mtx, row) )  # add row
  mtx:
    [1, 2, 3]
    [4, 5, 6]
    [7, 8, 9]
    [4, 4, 4]
  
# 6
Print long array of dimension (n,) without linebreaks:
  np.array_repr(mtx).replace('\n', '')

# 7.1
Function to pretty print long array so as to avoid line breaks:

def print_array(arr, precision = None):
	if precision is not None:
		np.set_printoptions(precision=precision)  # if values are long precision numbers

	print np.array_repr(ds[:]).replace('\n', '').replace('],',']\n')
	
