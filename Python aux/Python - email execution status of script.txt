import sys
import subprocess
import smtplib
import datetime
import os

def send_msg(email_subject='N/A', email_body='N/A'):
	mail = smtplib.SMTP('smtp.gmail.com',587)
	mail.ehlo()
	mail.starttls()

	FROM  = 'a...ay.b...k@gmail.com'
	passw = < password of FROM email >
	TO    = 'a...ay.b...k@gmail.com'
	mail.login(FROM, passw)

	message = 'Subject: {}\n\n{}'.format(email_subject, email_body)
	mail.sendmail(FROM, TO, message) 
	mail.close()

	print("Email sent:")
	print("\tSubject: %s" % email_subject)
	print("\tText: %s" % email_body)



if __name__=="__main__":
	# 1 send email notification about START status
	-----------------------------------------------------------------
	code_name = 'My hdf5 experiment'
	SBJ = 'Code execution STARTED, code name: %s' % code_name
	MSG = 'Code execution STARTED \nTime email sent: %s' % str(datetime.datetime.now())
	send_msg(SBJ, MSG)

	# 2.1 get code execution command
	-----------------------------------------------------------------
	# cmd command (splitted by tokens)
	print("\nCode output:")
	cmd = ['python', <'my_python_script.py'>]    # e.g. 'python my_python_script.py' in cmd
	
	# 2.2 run code execution command
	-----------------------------------------------------------------
	# execute cmd command and get execution status code
	return_code = subprocess.call(cmd)
	print("Execution status: %d \n" % return_code)

	# 3 email notification about END status
	-----------------------------------------------------------------
	# create subject and content to email according to status code
	if return_code == 0:
		SBJ = 'Code execution status - SUCCESSFUL'
		MSG = 'Code finished SUCCESSFULLY \nTime email sent: %s' % str(datetime.datetime.now())
	else:
		SBJ = 'Code execution status - FAILED'
		MSG = 'Code FAILED with code %d  \nTime email sent: %s' % (return_code, str(datetime.datetime.now()))

	send_msg(SBJ, MSG)

	# 4 shut down computer in 5 sec
	-----------------------------------------------------------------
	# cmd = ['shutdown', '-s', '-t', '5']
	# return_code = subprocess.Popen(cmd, stdout=subprocess.PIPE)
	
	sys.exit(0)
