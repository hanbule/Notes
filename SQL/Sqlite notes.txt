DB broswer list:
    DBeaver                (does not support REGEXP)
    DB Browser for SQLite  (Link:  https://xn--90abhbolvbbfgb9aje4m.xn--p1ai/%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D1%83/%D0%BF%D1%80%D0%BE%D1%87%D0%B5%D0%B5/db-browser-for-sqlite-%D0%B1%D1%80%D0%B0%D1%83%D0%B7%D0%B5%D1%80-%D0%B1%D0%B0%D0%B7-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B4%D0%BB%D1%8F-sqlite.html)

# 1.1
Get substring
    SUBSTR(string, start_index, count_of_symbols)

# 1.2
Join strings
    string-1||string_2

# 1.3
String to date:
    DATE(string_date)          -- string_date should be in 'YYYY-MM-DD' format
    Hint: use SUBSTR and || to parse dates from complex string that has date.

# 1.4
String to datetime:
    DATETIME(string_datetime)  -- string_datetime should be in 'YYYY-MM-DD HH:MM:SS' format
    Hint: use SUBSTR and || to parse dates from complex string that has date.

# 1.5
Replace in string
    SELECT REPLACE('This is a cat','This','That');

# 2
Get first N rows:
    select * from table limit N

# 3.1
Create table
    CREATE TABLE IF NOT EXISTS table_name (
                                            id integer PRIMARY KEY,
					    firsname TEXT NOT NULL,
                                            surname TEXT,
                                          )
					  
# 3.2
Copy table into new table:
    CREATE TABLE new_table 
    AS select * from old_table
    
    -- pandas analogy:
    -- df2 = df1

# 3.3
Copy values from existing column into new column:
Ex 1:
    ALTER TABLE table ADD COLUMN column_a column_type;
    UPDATE column SET column_a = neighbour_column;

    -- pandas analogy:
    -- df1['column_a'] = df1['neighbour_column']

Ex 2:
    ALTER TABLE table ADD COLUMN column_a column_type;
    UPDATE column SET column_a = substr(neighbour_column, 1,4);   --or copy just part of neighbour_column

    -- pandas analogy:
    -- df1['column_a'] = df1['neighbour_column'].apply(lambda x: x[1, 1+4])

# 4
Get row number (row number goes in accordance with row insertion order):
    select rowid from my_table
    select rowid, column_1 from my_table
    
# 5
Joining:

Ex 1:
    my_table
    col_a  col_b
    a      aa
    b      bb
    c      cc
    d      dd

To get result where each value in 1st col_a has it's next value as neigbour :
    col_a  col_a
    a      b
    b      c
    c      d

Query:
    select t1.col_a, t2.col_a
    from my_table t1 left join my_table t2 
    on t1.rowid+1=t2.rowid
    
    or
    select t1.col_a, t2.col_a
    from my_table t1, my_table t2 
    where t1.rowid+1=t2.rowid
    
    
Ex 2:
    my_table
    col_a   col_b
    a       aa
    NULL    bb
    c       cc
    NULL    dd
    NULL    ee

To get result where each NULL is set to it's predecessor value:
    col_a   col_b
    a       aa
    a       bb
    c       cc
    c       dd
    c       ee

Query:
    UPDATE my_table
    SET col_a = (select col_a from my_table t2 where my_table.rowid-1=t2.rowid and my_table.col_a is null)
    WHERE EXISTS (select col_a from my_table t2 where my_table.rowid-1=t2.rowid and my_table.col_a is null)
